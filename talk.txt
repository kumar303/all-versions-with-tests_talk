
=======================================================
Supporting All Versions of Python All The Time With Tox
=======================================================

:Author: Kumar McMillan
:Venue: PyCon 2011

Packages
========

- We build packages
- We share packages

  - github
  - PyPI

- Fabric of our community

.. class:: handout

  There are many people in this room who have created packages that I use

The Python Package Index
========================

http://pypi.python.org/pypi

.. class:: incremental

  - 11,977 packages
  - Ready for Python 3?

    - 240
    - Programming Language :: Python :: 3

Python 2
========

.. class:: center

  .. class:: huge

    PYTHON 2

  .. class:: huge

    IS

  .. class:: huge

    DEPRECATED

.. class:: handout

  - 2.7 was the last release, maintenance mode
  - 3.2 was just released!


Python 2 and Python 3
=====================

- How do we get on Python 3?

[tandem bicycle]

- Using tox
  
  - http://codespeak.net/tox/

Hacking on a package
====================

.. code-block:: bash

  $ virtualenv ~/tmp/fudge
  ...
  $ source ~/tmp/fudge/bin/activate
  (fudge)$ python setup.py develop
  ...
  (fudge)$ pip install Nose
  ...
  (fudge)$ nosetests
  ......................................................................................................................................................................................
  ----------------------------------------------------------------------
  Ran 182 tests in 0.589s

  OK

.. class:: handout
  
  - Great, but all this ran in my default Python
  - How do you do this for Python3?

Python 3 Syntax
===============

.. code-block:: python

  $ python3
  >>> import fudge
  Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
    File "fudge/__init__.py", line 15, in <module>
      from fudge.patcher import *
    File "fudge/patcher.py", line 83
      raise etype, val, tb
                 ^
  SyntaxError: invalid syntax

Python 3 Syntax
===============

Python **2**:

.. code-block:: python

  print u'Hello %s' % name

Python **3**:

.. code-block:: python

  print('Hello {0}'.format(name))

- **2to3** (stdlib)
- compiles Python 2 code into 3 code


Dual platform setup.py
======================

.. code-block:: python

  kw = {}
  if sys.version_info >= (3,):
      kw['use_2to3'] = True

  setup(name='YourModule',
        version='0.1,
        **kw)

.. code-block:: bash

  $ python setup.py build

(requires distribute)

Supporting Python 3 With Tox
============================

Tox automates a multi-version testing environment

.. code-block:: bash

  $ tox -e py26,py32

- manages each virtualenv
- manages requirements
- executes test commands
- customizable in tox.ini

tox.ini config
==============

.. code-block:: ini
  
  [tox]
  envlist=py32,py26

  [testenv]
  deps=nose
  commands=nosetests []

tox.ini overrides
=================

.. code-block:: ini

  [testenv:py32]
  basepython=python3.2
  # change into .tox to prevent using 2.x src
  changedir=.tox
  deps= nose
  distribute=True
  commands=nosetests fudge.tests._py3_suite


.. class: handout

  - the test virtualenv
  - virtualenv overrides
  - dependencies to install
  - commands to run
  - tox --showconfig

Examples
========

- nosetests, py.test
- building docs w/ sphinx
- custom test runner

Testing Sphinx Doctests
=======================

- special env for sphinx

Testing Django Apps
===================

- test against Django stable
- test against Django trunk

Using tox in Hudson
===================

- $TOXENV with Matrix build
- [view recipe]

tox.ini Hudson overrides
========================

.. code-block:: ini

  [hudson:testenv]
  commands=
    nosetests 
      --with-xunit
      --xunit-file={toxinidir}/nosetests-{envname}.xml

Hudson Bootstrapping
====================

.. code-block:: python

    # install tox on any slave:
    url = "https://pytox.googlecode.com/hg/toxbootstrap.py"
    os.environ['USETOXDEV']="1"  # use tox dev version until 0.9
    d = dict(__file__='toxbootstrap.py')
    exec urllib.urlopen(url).read() in d
    d['cmdline'](['--recreate'])
