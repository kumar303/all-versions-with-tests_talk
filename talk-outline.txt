===================================================================
Supporting All Versions of Python All The Time With Automated Tests
===================================================================

If you maintain a module that targets multiple environments then this talk
will explain the modern tools and techniques needed to ensure your module
works in all versions of Python. If you're new to testing, you'll get a brief
intro to nosetests, py.test, and unittest[2] so you can start building an
automated test suite. If you already have a test suite, you'll find out how to
leverage the tox command line tool and continuous integration (CI) to make
sure every code change executes tests in all versions of Python, including 2.4
through 2.7, Jython, and 3.x. As for Python 3, this talk will present a
succinct build / test strategy for maintaining a module in both 2.x and 3.x.
Ultimately, this talk aims to bridge the gap between Python 2 and 3 so that
our vast ecosystem of third party libraries will live on in the world of
Python 3.

- count of PyPI packages
  - percentage that support Python 3
  - percentage that support Jython

- how to support all versions all the time (overview)
  - brief intro to automated tests
  - using tox
  - using tox + Hudson for CI

- automated testing tools
  - nosetests
  - py.test
  - unittest2
  - plugins

- using tox
  - http://codespeak.net/tox/
  - demo
  - explanation of tox.ini
  - substitution variables
  - customizing an env
  - build vs. test
  - virtualenv

- a test suite for Python 2 and 3
  - explanation of 2to3
  - tox recipe

- integrating tox into Hudson
  - brief intro to Hudson
  - using the matrix build with $TOXENV
  - e.g. http://hudson.testrun.org/job/nose-unstable/

- congratulations
  - you now know how to maintain a module in all major versions of Python using...
    - a test runner
    - tox
    - Hudson

